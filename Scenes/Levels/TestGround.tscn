[gd_scene load_steps=24 format=2]

[ext_resource path="res://Scenes/Models/Player/PlayerTemplate.tscn" type="PackedScene" id=1]
[ext_resource path="res://default_env.tres" type="Environment" id=2]
[ext_resource path="res://Scenes/Levels/Scripts/TestGround.gd" type="Script" id=3]

[sub_resource type="PlaneMesh" id=1]
size = Vector2( 1000, 1000 )
subdivide_width = 42
subdivide_depth = 42

[sub_resource type="VisualShaderNodeColorOp" id=2]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.5, 0.2, 0 ) ]
operator = 4

[sub_resource type="OpenSimplexNoise" id=3]

[sub_resource type="NoiseTexture" id=4]
noise = SubResource( 3 )

[sub_resource type="VisualShaderNodeTexture" id=5]
texture = SubResource( 4 )
texture_type = 1

[sub_resource type="OpenSimplexNoise" id=6]

[sub_resource type="NoiseTexture" id=7]
noise = SubResource( 6 )

[sub_resource type="VisualShaderNodeTexture" id=8]
texture = SubResource( 7 )
texture_type = 1

[sub_resource type="VisualShaderNodeColorOp" id=9]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0, 0.5, 0 ) ]
operator = 4

[sub_resource type="VisualShader" id=10]
code = "shader_type spatial;
render_mode diffuse_oren_nayar, specular_disabled;

uniform sampler2D tex_frg_8 : hint_albedo;
uniform sampler2D tex_frg_3 : hint_albedo;



void vertex() {
// Output:0

}

void fragment() {
// Texture:8
	vec4 tex_frg_8_read = texture(tex_frg_8, UV.xy);
	vec3 n_out8p0 = tex_frg_8_read.rgb;
	float n_out8p1 = tex_frg_8_read.a;

// ColorOp:9
	vec3 n_in9p1 = vec3(0.00000, 0.50000, 0.00000);
	vec3 n_out9p0;
	{
		float base = n_out8p0.x;
		float blend = n_in9p1.x;
		if (base < 0.5) {
			n_out9p0.x = 2.0 * base * blend;
		} else {
			n_out9p0.x = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out8p0.y;
		float blend = n_in9p1.y;
		if (base < 0.5) {
			n_out9p0.y = 2.0 * base * blend;
		} else {
			n_out9p0.y = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out8p0.z;
		float blend = n_in9p1.z;
		if (base < 0.5) {
			n_out9p0.z = 2.0 * base * blend;
		} else {
			n_out9p0.z = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}

// ColorOp:10
	vec3 n_in10p1 = vec3(0.50000, 0.20000, 0.00000);
	vec3 n_out10p0;
	{
		float base = n_out9p0.x;
		float blend = n_in10p1.x;
		if (base < 0.5) {
			n_out10p0.x = 2.0 * base * blend;
		} else {
			n_out10p0.x = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out9p0.y;
		float blend = n_in10p1.y;
		if (base < 0.5) {
			n_out10p0.y = 2.0 * base * blend;
		} else {
			n_out10p0.y = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out9p0.z;
		float blend = n_in10p1.z;
		if (base < 0.5) {
			n_out10p0.z = 2.0 * base * blend;
		} else {
			n_out10p0.z = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}

// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, UV.xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// Output:0
	ALBEDO = n_out10p0;
	NORMAL = n_out3p0;
	NORMALMAP = n_out3p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -772, 275 )
modes/diffuse = 2
modes/specular = 4
nodes/fragment/0/position = Vector2( 380, 180 )
nodes/fragment/3/node = SubResource( 5 )
nodes/fragment/3/position = Vector2( -320, 420 )
nodes/fragment/8/node = SubResource( 8 )
nodes/fragment/8/position = Vector2( -760, 60 )
nodes/fragment/9/node = SubResource( 9 )
nodes/fragment/9/position = Vector2( -380, 100 )
nodes/fragment/10/node = SubResource( 2 )
nodes/fragment/10/position = Vector2( -20, 80 )
nodes/fragment/connections = PoolIntArray( 3, 0, 0, 8, 8, 0, 9, 0, 9, 0, 10, 0, 10, 0, 0, 0, 3, 0, 0, 7 )

[sub_resource type="ShaderMaterial" id=11]
shader = SubResource( 10 )

[sub_resource type="ConvexPolygonShape" id=12]
points = PoolVector3Array( -500, 0, 500, 500, 0, -500, 500, 0, 500, -500, 0, -500, -500, 0, 500, 500, 0, -500, 500, 0, 500, -500, 0, -500, 500, 0, 500, -500, 0, -500, 500, 0, -500, -500, 0, 500, 500, 0, 500, -500, 0, -500, 500, 0, -500, -500, 0, 500, 500, 0, 500, -500, 0, 500, -500, 0, 500, 500, 0, 500, 500, 0, -500, -500, 0, -500, -500, 0, -500, 500, 0, -500 )

[sub_resource type="GIProbeData" id=13]
bounds = AABB( -5000, -100, -5000, 10000, 200, 10000 )
cell_size = 19.5312
to_cell_xform = Transform( 0.0512, 0, 0, 0, 0.0512, 0, 0, 0, 0.0512, 256, 5.12, 256 )
dynamic_data = PoolIntArray( 0, 10, 512, 16, 512, 1, 0, 0, 0, 0, 3, 0, 1287736352, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 8355711, 0 )
dynamic_range = 4
energy = 0.5
bias = 1.5
normal_bias = 0.505
propagation = 0.7

[sub_resource type="PlaneMesh" id=14]
subdivide_width = 128
subdivide_depth = 128

[sub_resource type="Shader" id=15]
code = "shader_type spatial;
render_mode cull_disabled, specular_schlick_ggx;

uniform sampler2D tex_frg_6 : hint_albedo;
uniform sampler2D noise;
uniform float height_scale = 0.5;

float height(vec2 position,float time) {
	vec2 offset = 0.01 * cos(position + time);
	return texture(noise, (position / 10.0) - offset).x;
}
void vertex() {
// Output:0
	vec2 pos = VERTEX.xz;
    float k = height(pos, TIME);
    VERTEX.y = k;
	NORMAL = normalize(vec3(k - height(pos + vec2(0.1, 0.0), TIME), 0.1, k - height(pos + vec2(0.0, 0.1), TIME)));
	//float height = texture(noise, VERTEX.xz / 5.0 + 0.5).x;
	//VERTEX.y += height * height_scale;
}

void fragment() {
// Input:7
	vec3 n_out7p0 = COLOR.rgb;

// VectorOp:8
	vec3 n_in8p1 = vec3(0.00000, 0.20000, 0.30000);
	vec3 n_out8p0 = n_out7p0 * n_in8p1;

// VectorFunc:4
	vec3 n_in4p0 = vec3(0.80000, 0.80000, 0.80000);
	vec3 n_out4p0 = max(min(n_in4p0, vec3(1.0)), vec3(0.0));

// Texture:6
	vec4 tex_frg_6_read = texture(tex_frg_6, UV.xy);
	vec3 n_out6p0 = tex_frg_6_read.rgb;
	float n_out6p1 = tex_frg_6_read.a;

// Output:0
	ALBEDO = n_out8p0;
	ALPHA = dot(n_out4p0, vec3(0.333333, 0.333333, 0.333333));
	NORMALMAP = n_out6p0;
	SSS_STRENGTH = dot(n_out6p0, vec3(0.333333, 0.333333, 0.333333));
	METALLIC = 0.0;
	RIM = 0.2;
}

void light() {
// Output:0

}
"

[sub_resource type="OpenSimplexNoise" id=16]

[sub_resource type="NoiseTexture" id=17]
seamless = true
noise = SubResource( 16 )

[sub_resource type="ShaderMaterial" id=18]
shader = SubResource( 15 )
shader_param/height_scale = 0.5
shader_param/noise = SubResource( 17 )

[sub_resource type="BoxShape" id=19]
extents = Vector3( 1, 6.31698, 1 )

[sub_resource type="BoxShape" id=20]
extents = Vector3( 5000, 50, 1 )

[node name="TestGround" type="Spatial"]
script = ExtResource( 3 )

[node name="Ground" type="StaticBody" parent="." groups=[
"Ground",
]]
collision_layer = 519

[node name="MeshInstance" type="MeshInstance" parent="Ground"]
use_in_baked_light = true
mesh = SubResource( 1 )
material/0 = SubResource( 11 )

[node name="CollisionShape" type="CollisionShape" parent="Ground"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -0.681, 0, 0.801 )
shape = SubResource( 12 )

[node name="GIProbe" type="GIProbe" parent="Ground"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 98.1195, 0 )
subdiv = 3
extents = Vector3( 500, 100, 500 )
energy = 0.5
normal_bias = 0.505
data = SubResource( 13 )

[node name="Waterline" type="Spatial" parent="Ground"]

[node name="MeshInstance" type="MeshInstance" parent="Ground/Waterline"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.34049, 0 )
cast_shadow = 0
use_in_baked_light = true
mesh = SubResource( 14 )
material/0 = SubResource( 18 )

[node name="underwater" type="Area" parent="Ground/Waterline/MeshInstance"]
gravity_point = true
gravity = -6.58

[node name="CollisionShape" type="CollisionShape" parent="Ground/Waterline/MeshInstance/underwater"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -5.90233, 0 )
shape = SubResource( 19 )

[node name="PlayerTemplate" parent="." instance=ExtResource( 1 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 30.0488, 0 )

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = ExtResource( 2 )

[node name="DirectionalLight" type="DirectionalLight" parent="."]
transform = Transform( 1, 0, 0, 0, -0.744894, 0.667183, 0, -0.667183, -0.744894, 0, 85.2791, 0 )
light_bake_mode = 2
shadow_enabled = true
directional_shadow_mode = 0

[node name="StaticBody" type="StaticBody" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 26.0545, 0 )
visible = false

[node name="CollisionShape" type="CollisionShape" parent="StaticBody"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 495.503 )
shape = SubResource( 20 )
disabled = true

[node name="CollisionShape2" type="CollisionShape" parent="StaticBody"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -5000 )
shape = SubResource( 20 )
disabled = true

[node name="CollisionShape3" type="CollisionShape" parent="StaticBody"]
transform = Transform( -4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, 5000, 0, -0.1 )
shape = SubResource( 20 )
disabled = true

[node name="CollisionShape4" type="CollisionShape" parent="StaticBody"]
transform = Transform( -4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, -491.326, 0, -0.0997521 )
shape = SubResource( 20 )
disabled = true

[node name="Camera" type="Camera" parent="."]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, 1, 0, -1, -4.37114e-08, 0, 26.3223, 0 )
visible = false
projection = 1
size = 50.0

[connection signal="area_shape_entered" from="Ground/Waterline/MeshInstance/underwater" to="." method="_on_underwater_area_shape_entered"]
[connection signal="body_shape_entered" from="Ground/Waterline/MeshInstance/underwater" to="." method="_on_underwater_body_shape_entered"]
[connection signal="body_shape_exited" from="Ground/Waterline/MeshInstance/underwater" to="." method="_on_underwater_body_shape_exited"]
